.. _asset_order:

=============
Asset Order
=============

Orders are classes which define how an order in the exchange and what kind of
orders are.When you submit an order, monkq would generate an order
class for that.Orders are always related to one :class:`~BaseAccount`.

BaseOrder
==========

.. class:: BaseOrder

    BaseOrder is the father class of every order in monkq.All the orders
    are inherited from :class:`~BaseOrder` and they have all the attrs and
    method of it.

    .. py:attribute:: account

        Reference to the :class:`~BaseAccount` which the order belongs to.

    .. py:attribute:: order_id

        It is an unique id for the order. It is generated by
        :py:func:`~uuid.uuid4`.

    .. py:attribute:: instrument

        It returns the reference to the :class:`~Instrument` of the order.

    .. py:attribute:: quantity

        The total quantity of the order.

    .. py:attribute:: traded_quantity

        The traded quantity of the order.Normally when the order firstly
        is created, the `traded_quantity`  is 0.

    .. py:attribute:: side

        Describe the :class:`~SIDE` of the order.

    .. py:attribute:: remain_quantity

        The total quantity of the order - the traded quantity of the order

    .. py:attribute:: trades

        List of :class:`~Trade` that applied to this order.

    .. py:attribute:: order_status

        The status of the order.

        There are 3 types of order status.

            * not traded(:attr:`~BaseOrder.traded_quantity` == 0)
            * fully traded(:attr:`~BaseOrder.traded_quantity` == :attr:`~BaseOrder.quantity`)
            * partly traded(0 < :attr:`~BaseOrder.traded_quantity` < :attr:`~BaseOrder.quantity`)

    .. py:attribute:: submit_datetime

        The py:class:`~datetime.datetime` which the order submitted.

    .. py:attribute:: cancel_datetime

        If the order is canceled during the strategy running, it would return
        the cancel datetime. Otherwise , it would be None.

    .. py:attribute:: text

        The text you mark on the order.


MarketOrder
=============

.. class:: MarketOrder

    LimitOrder is inherited from :class:`~BaseOrder`.It has all the attrs of
    :class:`~BaseOrder`.MarketOrder would possibly traded as soon as possible
    in the exchange at the market price.


LimitOrder
==========

.. class:: LimitOrder

    LimitOrder is inherited from :class:`~BaseOrder`.It has all the attrs of
    :class:`~BaseOrder`. Additionally, `LimitOrder` provide a limit price of
    the order.The order can only be traded at the limit price.

    .. py:attribute:: price

        The limit price of the order. The trades of the order can only be traded
        in this price.

    .. py:attribute:: order_value

        The total value which is calculated by the price of the LimitOrder
        and the total quantity.

    .. py:attribute:: remain_value

        The remain value which is calculated by the price of the LimitOrder
        and the remain quantity.

StopMarketOrder
================

.. class:: StopMarketOrder

    StopMarketOrder is inherited from :class:`~BaseOrder`. It has all the
    attrs of :class:`~BaseOrder`. The StopMarketOrder has one additional
    attrs--`stop_price`. If the instrument of the order reach to `stop_price`
    of the order, a market order of the instrument would be submitted to
    the exchange immediately.

    .. py:attribute:: stop_price

        The price that triggered submitting the market order.

StopLimitOrder
===============

.. class:: StopLimitOrder

    StopLimitOrder is inherited from :class:`~BaseOrder`. It has all the
    attrs of :class:`~BaseOrder`.The StopLimitOrder is just like
    :class:`~StopMarketOrder` that has `stop_price` attr.Instead of
    submitting a market order of the instrument, StopLimitOrder would submit
    a limit order at the `stop_price` of the instrument.


    .. py:attribute:: stop_price

        The price that triggered submitting the limit order at `stop_price`.

FutureLimitOrder
=================

.. class:: FutureLimitOrder

    FutureLimitOrder is inherited from :class:`~LimitOrder`.It has all the
    attrs of :class:`~LimitOrder` but only for future contract.

    .. py:attribute:: account

        Reference to the :class:`~FutureAccount` which the order belongs to.

    .. py:attribute:: instrument

        It returns the reference to the :class:`~FutureInstrument` of the 
        order.

    .. py:attribute:: direction

        Describe the :class:`~DIRECTION` of the order.

FutureMarketOrder
==================

.. class:: FutureMarketOrder

    FutureMarketOrder is inherited from :class:`~MarketOrder`.It has all the
    attrs of :class:`~MarketOrder` but only for future contract.

    .. py:attribute:: account

        Reference to the :class:`~FutureAccount` which the order belongs to.

    .. py:attribute:: instrument

        It returns the reference to the :class:`~FutureInstrument` of the
        order.

    .. py:attribute:: direction

        Describe the :class:`~DIRECTION` of the order.
